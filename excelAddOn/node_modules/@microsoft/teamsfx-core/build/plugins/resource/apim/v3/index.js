"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApimPluginV3 = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
const typedi_1 = require("typedi");
const constants_1 = require("../../../../common/constants");
const tools_1 = require("../../../../common/tools");
const CommonErrorHandlerMW_1 = require("../../../../core/middleware/CommonErrorHandlerMW");
const folder_1 = require("../../../../folder");
const question_1 = require("../../../solution/fx-solution/question");
const constants_2 = require("../../../solution/fx-solution/v3/constants");
const answer_1 = require("../answer");
const config_1 = require("../config");
const constants_3 = require("../constants");
const error_1 = require("../error");
const factory_1 = require("../factory");
const progressBar_1 = require("../utils/progressBar");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const utils_1 = require("../../../../common/utils");
const constants_4 = require("../../../../component/constants");
let ApimPluginV3 = class ApimPluginV3 {
    constructor() {
        this.name = constants_2.BuiltInFeaturePluginNames.apim;
        this.displayName = "API Management";
        this.progressBar = new progressBar_1.ProgressBar();
    }
    async getQuestionsForDeploy(ctx, inputs, envInfo, tokenProvider) {
        const questionManager = await factory_1.Factory.buildQuestionManager(inputs.platform, envInfo, tokenProvider.azureAccountProvider, ctx.telemetryReporter, ctx.logProvider);
        const apimState = envInfo && envInfo.state && envInfo.state[constants_4.ComponentNames.APIM]
            ? envInfo.state[constants_4.ComponentNames.APIM]
            : {};
        const apimConfig = envInfo ? new config_1.ApimPluginConfig(apimState, envInfo.envName) : undefined;
        const node = await questionManager.deploy(inputs.projectPath, envInfo, apimConfig);
        return teamsfx_api_1.ok(node);
    }
    async generateCode(ctx, inputs) {
        const apimConfig = new config_1.ApimPluginConfig({}, "");
        const answer = answer_1.buildAnswer(inputs);
        const scaffoldManager = await factory_1.Factory.buildScaffoldManager(ctx.telemetryReporter, ctx.logProvider);
        const appName = utils_1.convertToAlphanumericOnly(ctx.projectSetting.appName);
        if (answer.validate) {
            await answer.validate(constants_3.PluginLifeCycle.Scaffold, apimConfig, inputs.projectPath);
        }
        answer.save(constants_3.PluginLifeCycle.Scaffold, apimConfig);
        await scaffoldManager.scaffold(appName, inputs.projectPath);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    async generateBicep(ctx, inputs) {
        const pluginCtx = { plugins: inputs.allPluginsAfterAdd };
        const bicepTemplateDir = path.join(folder_1.getTemplatesFolder(), constants_3.ApimPathInfo.BicepTemplateRelativeDir);
        const provisionOrchestration = await tools_1.generateBicepFromFile(path.join(bicepTemplateDir, constants_1.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await tools_1.generateBicepFromFile(path.join(bicepTemplateDir, constants_3.ApimPathInfo.ProvisionModuleFileName), pluginCtx);
        const configOrchestration = await tools_1.generateBicepFromFile(path.join(bicepTemplateDir, constants_1.Bicep.ConfigFileName), pluginCtx);
        const configModules = await tools_1.generateBicepFromFile(path.join(bicepTemplateDir, constants_3.ApimPathInfo.ConfigurationModuleFileName), pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { apim: provisionModules },
            },
            Configuration: {
                Orchestration: configOrchestration,
                Modules: { apim: configModules },
            },
            Reference: {
                serviceResourceId: constants_3.ApimOutputBicepSnippet.ServiceResourceId,
            },
            Parameters: JSON.parse(await fs_extra_1.default.readFile(path.join(bicepTemplateDir, constants_1.Bicep.ParameterFileName), constants_1.ConstantString.UTF8Encoding)),
        };
        return teamsfx_api_1.ok([result]);
    }
    async addInstance(ctx, inputs) {
        const solutionSettings = ctx.projectSetting.solutionSettings;
        const activeResourcePlugins = solutionSettings.activeResourcePlugins;
        const azureResources = solutionSettings.azureResources;
        if (!activeResourcePlugins.includes(this.name))
            activeResourcePlugins.push(this.name);
        if (!azureResources.includes(question_1.AzureResourceApim.id))
            azureResources.push(question_1.AzureResourceApim.id);
        return teamsfx_api_1.ok([]);
    }
    async updateBicep(ctx, inputs) {
        const pluginCtx = { plugins: inputs.allPluginsAfterAdd };
        const bicepTemplateDir = path.join(folder_1.getTemplatesFolder(), constants_3.ApimPathInfo.BicepTemplateRelativeDir);
        const configModules = await tools_1.generateBicepFromFile(path.join(bicepTemplateDir, constants_3.ApimPathInfo.ConfigurationModuleFileName), pluginCtx);
        const result = {
            Reference: {
                serviceResourceId: constants_3.ApimOutputBicepSnippet.ServiceResourceId,
            },
            Configuration: {
                Modules: { apim: configModules },
            },
        };
        return teamsfx_api_1.ok([result]);
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider) {
        await this.progressBar.init(constants_3.PluginLifeCycleToProgressStep[constants_3.PluginLifeCycle.Provision], ctx.userInteraction);
        envInfo.state[constants_4.ComponentNames.APIM] = envInfo.state[constants_4.ComponentNames.APIM] || {};
        const apimState = envInfo.state[constants_4.ComponentNames.APIM];
        const apimConfig = new config_1.ApimPluginConfig(apimState, envInfo.envName);
        const apimManager = await factory_1.Factory.buildApimManager(envInfo, ctx.telemetryReporter, tokenProvider.azureAccountProvider, ctx.logProvider);
        const aadManager = await factory_1.Factory.buildAadManager(tokenProvider.m365TokenProvider, ctx.telemetryReporter, ctx.logProvider);
        const appName = error_1.AssertNotEmpty("projectSettings.appName", ctx.projectSetting.appName);
        await this.progressBar.next(constants_3.ProgressStep.Provision, constants_3.ProgressMessages[constants_3.ProgressStep.Provision].CreateApim);
        await apimManager.provision(apimConfig);
        await this.progressBar.next(constants_3.ProgressStep.Provision, constants_3.ProgressMessages[constants_3.ProgressStep.Provision].CreateAad);
        await aadManager.provision(apimConfig, appName);
        await this.progressBar.close(constants_3.ProgressStep.Provision, true);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    async configureResource(ctx, inputs, envInfo, tokenProvider) {
        const apimResource = envInfo.state[constants_4.ComponentNames.APIM];
        const apimConfig = new config_1.ApimPluginConfig(apimResource, envInfo.envName);
        const aadConfig = new config_1.AadPluginConfig(envInfo);
        const aadManager = await factory_1.Factory.buildAadManager(tokenProvider.m365TokenProvider, ctx.telemetryReporter, ctx.logProvider);
        const teamsAppAadManager = await factory_1.Factory.buildTeamsAppAadManager(tokenProvider.m365TokenProvider, ctx.telemetryReporter, ctx.logProvider);
        await this.progressBar.next(constants_3.ProgressStep.PostProvision, constants_3.ProgressMessages[constants_3.ProgressStep.PostProvision].ConfigClientAad);
        await aadManager.postProvision(apimConfig, aadConfig, constants_3.AadDefaultValues.redirectUris);
        await this.progressBar.next(constants_3.ProgressStep.PostProvision, constants_3.ProgressMessages[constants_3.ProgressStep.PostProvision].ConfigApim);
        await this.progressBar.next(constants_3.ProgressStep.PostProvision, constants_3.ProgressMessages[constants_3.ProgressStep.PostProvision].ConfigAppAad);
        await teamsAppAadManager.postProvision(aadConfig, apimConfig);
        // Delete user sensitive configuration
        delete apimResource[constants_3.ApimPluginConfigKeys.publisherEmail];
        delete apimResource[constants_3.ApimPluginConfigKeys.publisherName];
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        const solutionConfig = new config_1.SolutionConfig(envInfo);
        const apimConfig = new config_1.ApimPluginConfig(envInfo.state[constants_4.ComponentNames.APIM], envInfo.envName);
        const functionConfig = new config_1.FunctionPluginConfig(envInfo);
        const answer = answer_1.buildAnswer(inputs);
        if (answer.validate) {
            await answer.validate(constants_3.PluginLifeCycle.Deploy, apimConfig, inputs.projectPath);
        }
        answer.save(constants_3.PluginLifeCycle.Deploy, apimConfig);
        const apimManager = await factory_1.Factory.buildApimManager(envInfo, ctx.telemetryReporter, tokenProvider.azureAccountProvider, ctx.logProvider);
        await this.progressBar.next(constants_3.ProgressStep.Deploy, constants_3.ProgressMessages[constants_3.ProgressStep.Deploy].ImportApi);
        await apimManager.deploy(apimConfig, solutionConfig, functionConfig, answer, inputs.projectPath);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
};
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_2.BuiltInFeaturePluginNames.apim } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ApimPluginV3.prototype, "generateCode", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: {
                component: constants_2.BuiltInFeaturePluginNames.apim,
                eventName: "generate-arm-templates",
            },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ApimPluginV3.prototype, "generateBicep", null);
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_2.BuiltInFeaturePluginNames.apim } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ApimPluginV3.prototype, "addInstance", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_2.BuiltInFeaturePluginNames.apim, eventName: "update-arm-templates" },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ApimPluginV3.prototype, "updateBicep", null);
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_2.BuiltInFeaturePluginNames.apim } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ApimPluginV3.prototype, "provisionResource", null);
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_2.BuiltInFeaturePluginNames.apim } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ApimPluginV3.prototype, "configureResource", null);
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_2.BuiltInFeaturePluginNames.frontend } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ApimPluginV3.prototype, "deploy", null);
ApimPluginV3 = tslib_1.__decorate([
    typedi_1.Service(constants_2.BuiltInFeaturePluginNames.apim)
], ApimPluginV3);
exports.ApimPluginV3 = ApimPluginV3;
//# sourceMappingURL=index.js.map