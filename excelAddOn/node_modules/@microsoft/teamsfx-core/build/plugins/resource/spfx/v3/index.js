"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPFxPluginV3 = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const CommonErrorHandlerMW_1 = require("../../../../core/middleware/CommonErrorHandlerMW");
const constants_1 = require("../../../solution/fx-solution/v3/constants");
const solutionSettingsHelper_1 = require("../../../solution/fx-solution/utils/solutionSettingsHelper");
const question_1 = require("../../../solution/fx-solution/question");
const error_1 = require("./error");
const uuid = tslib_1.__importStar(require("uuid"));
const questions_1 = require("../utils/questions");
const plugin_1 = require("./plugin");
const constants_2 = require("../utils/constants");
const util = tslib_1.__importStar(require("util"));
let SPFxPluginV3 = class SPFxPluginV3 {
    constructor() {
        this.name = constants_1.BuiltInFeaturePluginNames.spfx;
        this.displayName = "SPFx";
        this.description = "SharePoint Framework (SPFx)";
        this.spfxPluginImpl = new plugin_1.SPFxPluginImpl();
    }
    async getQuestionsForAddInstance(ctx, inputs) {
        const spfx_frontend_host = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        const spfx_framework_type = new teamsfx_api_1.QTreeNode(questions_1.frameworkQuestion);
        spfx_frontend_host.addChild(spfx_framework_type);
        const spfx_webpart_name = new teamsfx_api_1.QTreeNode(questions_1.webpartNameQuestion);
        spfx_frontend_host.addChild(spfx_webpart_name);
        const spfx_webpart_desp = new teamsfx_api_1.QTreeNode(questions_1.webpartDescriptionQuestion);
        spfx_frontend_host.addChild(spfx_webpart_desp);
        return teamsfx_api_1.ok(spfx_frontend_host);
    }
    async addInstance(ctx, inputs) {
        solutionSettingsHelper_1.ensureSolutionSettings(ctx.projectSetting);
        const solutionSettings = ctx.projectSetting.solutionSettings;
        const capabilities = solutionSettings.capabilities;
        if (capabilities.includes(question_1.TabSPFxItem.id)) {
            return teamsfx_api_1.err(error_1.SPFxAlreadyExistError());
        }
        const componentId = uuid.v4();
        const webpartName = inputs[questions_1.SPFXQuestionNames.webpart_name];
        // spfx is added for first time, scaffold and generate resource template
        const scaffoldRes = await this.spfxPluginImpl.scaffold(ctx, inputs, componentId);
        if (scaffoldRes.isErr())
            return teamsfx_api_1.err(scaffoldRes.error);
        capabilities.push(question_1.TabSPFxItem.id);
        const capabilitiesToAddManifest = [];
        const remoteStaticSnippet = {
            entityId: componentId,
            name: webpartName,
            contentUrl: util.format(constants_2.ManifestTemplate.REMOTE_CONTENT_URL, componentId),
            websiteUrl: constants_2.ManifestTemplate.WEBSITE_URL,
            scopes: ["personal"],
        };
        const remoteConfigurableSnippet = {
            configurationUrl: util.format(constants_2.ManifestTemplate.REMOTE_CONFIGURATION_URL, componentId),
            canUpdateConfiguration: true,
            scopes: ["team"],
        };
        capabilitiesToAddManifest.push({ name: "staticTab", snippet: remoteStaticSnippet }, {
            name: "configurableTab",
            snippet: remoteConfigurableSnippet,
        });
        const addCapRes = await ctx.appManifestProvider.addCapabilities(ctx, inputs, capabilitiesToAddManifest);
        if (addCapRes.isErr())
            return teamsfx_api_1.err(addCapRes.error);
        const webAppInfo = {
            name: "WebApplicationInfo",
            snippet: {
                resource: constants_2.ManifestTemplate.WEB_APP_INFO_RESOURCE,
                id: constants_2.ManifestTemplate.WEB_APP_INFO_ID,
            },
        };
        const updateWebAppInfoRes = await ctx.appManifestProvider.updateCapability(ctx, inputs, webAppInfo);
        if (updateWebAppInfoRes.isErr())
            return teamsfx_api_1.err(updateWebAppInfoRes.error);
        const activeResourcePlugins = solutionSettings.activeResourcePlugins;
        if (!activeResourcePlugins.includes(this.name))
            activeResourcePlugins.push(this.name);
        return teamsfx_api_1.ok([]);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        const buildRes = await this.spfxPluginImpl.buildSPPackage(ctx, inputs);
        if (buildRes.isErr()) {
            return buildRes;
        }
        return await this.spfxPluginImpl.deploy(ctx, inputs, tokenProvider);
    }
};
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInFeaturePluginNames.spfx } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], SPFxPluginV3.prototype, "addInstance", null);
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInFeaturePluginNames.spfx } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], SPFxPluginV3.prototype, "deploy", null);
SPFxPluginV3 = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInFeaturePluginNames.spfx)
], SPFxPluginV3);
exports.SPFxPluginV3 = SPFxPluginV3;
//# sourceMappingURL=index.js.map