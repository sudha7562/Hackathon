import { FxError, Inputs, QTreeNode, Result, TokenProvider, v2, v3, Void } from "@microsoft/teamsfx-api";
import { SqlConfig } from "../config";
import { SqlClient } from "../sqlClient";
import { ManagementClient } from "../managementClient";
export declare class SqlPluginV3 implements v3.PluginV3 {
    name: string;
    displayName: string;
    totalFirewallRuleCount: number;
    config: SqlConfig;
    generateBicep(ctx: v3.ContextWithManifestProvider, inputs: v3.AddFeatureInputs): Promise<Result<v3.BicepTemplate[], FxError>>;
    generateNewSqlServerBicep(ctx: v3.ContextWithManifestProvider, inputs: v3.AddFeatureInputs): Promise<Result<v3.BicepTemplate[], FxError>>;
    generateNewDatabaseBicep(): Promise<Result<v3.BicepTemplate[], FxError>>;
    addInstance(ctx: v3.ContextWithManifestProvider, inputs: v2.InputsWithProjectPath): Promise<Result<string[], FxError>>;
    updateBicep(ctx: v3.ContextWithManifestProvider, inputs: v3.UpdateInputs): Promise<Result<v3.BicepTemplate[], FxError>>;
    getQuestionsForProvision(ctx: v2.Context, inputs: Inputs, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: TokenProvider): Promise<Result<QTreeNode | undefined, FxError>>;
    getRuleName(suffix: number): string;
    private removeDatabases;
    private parseLoginToken;
    provisionResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
    configureResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider, telemetryProps?: any): Promise<Result<Void, FxError>>;
    addDatabaseUser(ctx: v2.Context, sqlClient: SqlClient, managementClient: ManagementClient): Promise<void>;
    private CheckAndSetAadAdmin;
    private getIdentity;
    private loadConfigSql;
    private loadDatabases;
    private loadConfig;
}
//# sourceMappingURL=index.d.ts.map