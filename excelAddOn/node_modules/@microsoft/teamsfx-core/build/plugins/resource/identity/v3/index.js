"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityPluginV3 = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
const typedi_1 = require("typedi");
const constants_1 = require("../../../../common/constants");
const tools_1 = require("../../../../common/tools");
const CommonErrorHandlerMW_1 = require("../../../../core/middleware/CommonErrorHandlerMW");
const folder_1 = require("../../../../folder");
const constants_2 = require("../../../solution/fx-solution/v3/constants");
const constants_3 = require("../constants");
let IdentityPluginV3 = class IdentityPluginV3 {
    constructor() {
        this.name = constants_2.BuiltInFeaturePluginNames.identity;
        this.displayName = "Microsoft Identity";
        this.description = "Microsoft Identity";
    }
    async generateBicep(ctx, inputs) {
        const pluginCtx = { plugins: inputs.allPluginsAfterAdd };
        const bicepTemplateDirectory = path.join(folder_1.getTemplatesFolder(), "plugins", "resource", "identity", "bicep");
        const provisionOrchestration = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_1.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_3.IdentityBicepFile.moduleTempalteFilename), pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { identity: provisionModules },
            },
            Reference: {
                identityName: constants_3.IdentityBicep.identityName,
                identityClientId: constants_3.IdentityBicep.identityClientId,
                identityResourceId: constants_3.IdentityBicep.identityResourceId,
                identityPrincipalId: constants_3.IdentityBicep.identityPrincipalId,
            },
        };
        return teamsfx_api_1.ok([result]);
    }
    async addInstance(ctx, inputs) {
        const solutionSettings = ctx.projectSetting.solutionSettings;
        const activeResourcePlugins = solutionSettings.activeResourcePlugins;
        if (!activeResourcePlugins.includes(this.name))
            activeResourcePlugins.push(this.name);
        return teamsfx_api_1.ok([]);
    }
    async updateBicep(ctx, inputs) {
        const result = {
            Reference: {
                identityName: constants_3.IdentityBicep.identityName,
                identityClientId: constants_3.IdentityBicep.identityClientId,
                identityResourceId: constants_3.IdentityBicep.identityResourceId,
                identityPrincipalId: constants_3.IdentityBicep.identityPrincipalId,
            },
        };
        return teamsfx_api_1.ok([result]);
    }
};
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_2.BuiltInFeaturePluginNames.identity } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], IdentityPluginV3.prototype, "generateBicep", null);
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_2.BuiltInFeaturePluginNames.identity } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], IdentityPluginV3.prototype, "addInstance", null);
tslib_1.__decorate([
    lib_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_2.BuiltInFeaturePluginNames.identity } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], IdentityPluginV3.prototype, "updateBicep", null);
IdentityPluginV3 = tslib_1.__decorate([
    typedi_1.Service(constants_2.BuiltInFeaturePluginNames.identity)
], IdentityPluginV3);
exports.IdentityPluginV3 = IdentityPluginV3;
//# sourceMappingURL=index.js.map