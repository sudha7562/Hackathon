import { FxError, Inputs, ProjectSettings, QTreeNode, Result, TokenProvider, v2, v3, Void } from "@microsoft/teamsfx-api";
import { FunctionConfig } from "../plugin";
export declare class FunctionPluginV3 implements v3.PluginV3 {
    name: string;
    displayName: string;
    config: FunctionConfig;
    private getFunctionProjectRootPath;
    getQuestionsForAddInstance(ctx: v2.Context, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
    private syncConfigFromContext;
    private syncConfigToContext;
    private validateConfig;
    private checkAndGet;
    generateCode(ctx: v3.ContextWithManifestProvider, inputs: v3.AddFeatureInputs): Promise<Result<Void, FxError>>;
    generateBicep(ctx: v3.ContextWithManifestProvider, inputs: v3.AddFeatureInputs): Promise<Result<v3.BicepTemplate[], FxError>>;
    updateBicep(ctx: v3.ContextWithManifestProvider, inputs: v3.UpdateInputs): Promise<Result<v3.BicepTemplate[], FxError>>;
    addInstance(ctx: v3.ContextWithManifestProvider, inputs: v2.InputsWithProjectPath): Promise<Result<string[], FxError>>;
    private needConfigure;
    private getFunctionAppName;
    private getFunctionAppResourceGroupName;
    private getFunctionAppSubscriptionId;
    private getSite;
    private collectFunctionAppSettings;
    isPluginEnabled(projectSettings: ProjectSettings, plugin: string): boolean;
    configureResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
    private handleDotnetChecker;
    private handleBackendExtensionsInstall;
    deploy(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
}
//# sourceMappingURL=index.d.ts.map