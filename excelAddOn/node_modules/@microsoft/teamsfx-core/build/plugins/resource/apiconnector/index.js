// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiConnectorPluginV2 = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const plugin_1 = require("./plugin");
const result_1 = require("./result");
const errors_1 = require("./errors");
const constants_1 = require("../../solution/fx-solution/constants");
const question_1 = require("../../solution/fx-solution/question");
let ApiConnectorPluginV2 = class ApiConnectorPluginV2 {
    constructor() {
        this.name = "fx-resource-api-connector";
        this.displayName = "Microsoft Api Connector";
        this.apiConnectorImpl = new plugin_1.ApiConnectorImpl();
    }
    activate(projectSettings) {
        const solutionSettings = projectSettings.solutionSettings;
        return solutionSettings.hostType === question_1.HostTypeOptionAzure.id;
    }
    async getQuestionsForUserTask(ctx, inputs, func, envInfo, tokenProvider) {
        return await this.apiConnectorImpl.generateQuestion(ctx, inputs);
    }
    async executeUserTask(ctx, inputs, func, localSettings, envInfo, tokenProvider) {
        if (func.method != constants_1.UserTaskFunctionName.ConnectExistingApi) {
            throw result_1.ResultFactory.SystemError(errors_1.ErrorMessage.ApiConnectorRouteError.name, errors_1.ErrorMessage.ApiConnectorRouteError.message(func.method));
        }
        const result = await this.apiConnectorImpl.scaffold(ctx, inputs);
        return result_1.ResultFactory.Success(Object.assign({ func: constants_1.UserTaskFunctionName.ConnectExistingApi }, result));
    }
};
ApiConnectorPluginV2 = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePluginsV2.ApiConnectorPlugin)
], ApiConnectorPluginV2);
exports.ApiConnectorPluginV2 = ApiConnectorPluginV2;
//# sourceMappingURL=index.js.map