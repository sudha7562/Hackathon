import { M365TokenProvider, AzureAccountProvider, FxError, Json, QTreeNode, Result, TokenProvider, v2, v3, Void } from "@microsoft/teamsfx-api";
import { FillInAzureConfigsResult, ProvisionSubscriptionCheckResult } from "../constants";
export declare function getQuestionsForProvision(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: TokenProvider): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function provisionResources(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider, telemetryProps?: Json): Promise<Result<v3.EnvInfoV3, FxError>>;
/**
 * make sure subscription is correct before provision
 *
 */
export declare function checkProvisionSubscriptionWhenSwitchAccountEnabled(ctx: v2.Context, envInfo: v3.EnvInfoV3, azureAccountProvider: AzureAccountProvider): Promise<Result<ProvisionSubscriptionCheckResult, FxError>>;
/**
 * Asks common questions and puts the answers in the global namespace of SolutionConfig
 *
 */
export declare function fillInAzureConfigs(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<FillInAzureConfigsResult, FxError>>;
export declare function askForDeployConsent(ctx: v2.Context, azureAccountProvider: AzureAccountProvider, envInfo: v3.EnvInfoV3): Promise<Result<Void, FxError>>;
export declare function askForProvisionConsent(ctx: v2.Context, azureAccountProvider: AzureAccountProvider, envInfo: v3.EnvInfoV3): Promise<Result<Void, FxError>>;
interface M365TenantRes {
    tenantIdInToken: string;
    tenantUserName: string;
}
export declare function getM365TenantId(m365TokenProvider: M365TokenProvider): Promise<Result<M365TenantRes, FxError>>;
export {};
//# sourceMappingURL=provision.d.ts.map