"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsFxAzureSolution = void 0;
const tslib_1 = require("tslib");
const hooks_1 = require("@feathersjs/hooks");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const CommonErrorHandlerMW_1 = require("../../../../core/middleware/CommonErrorHandlerMW");
const addFeature_1 = require("./addFeature");
const constants_1 = require("./constants");
const deploy_1 = require("./deploy");
const provision_1 = require("./provision");
const publish_1 = require("./publish");
const userTask_1 = require("./userTask");
let TeamsFxAzureSolution = class TeamsFxAzureSolution {
    constructor() {
        this.name = constants_1.BuiltInSolutionNames.azure;
        this.getQuestionsForAddFeature = addFeature_1.getQuestionsForAddFeature;
        this.getQuestionsForProvision = provision_1.getQuestionsForProvision;
        this.getQuestionsForDeploy = deploy_1.getQuestionsForDeploy;
        this.getQuestionsForPublish = publish_1.getQuestionsForPublish;
        this.getQuestionsForUserTask = userTask_1.getQuestionsForUserTask;
    }
    async addFeature(ctx, inputs, telemetryProps) {
        return addFeature_1.addFeature(ctx, inputs, telemetryProps);
    }
    async provisionResources(ctx, inputs, envInfo, tokenProvider, telemetryProps) {
        return provision_1.provisionResources(ctx, inputs, envInfo, tokenProvider, telemetryProps);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider, telemetryProps) {
        return deploy_1.deploy(ctx, inputs, envInfo, tokenProvider, telemetryProps);
    }
    async publishApplication(ctx, inputs, envInfo, tokenProvider, telemetryProps) {
        return publish_1.publishApplication(ctx, inputs, envInfo, tokenProvider, telemetryProps);
    }
    async executeUserTask(ctx, inputs, func, envInfo, tokenProvider, telemetryProps) {
        const method = func.method;
        if (method === "addCapability") {
            return this.addCapability(ctx, inputs, telemetryProps);
        }
        if (method === "addResource") {
            return this.addResource(ctx, inputs, telemetryProps);
        }
        return teamsfx_api_1.err(new teamsfx_api_1.NotImplementedError("Solution", "executeUserTask"));
    }
    async addCapability(ctx, inputs, telemetryProps) {
        return userTask_1.addCapability(ctx, inputs, telemetryProps);
    }
    async addResource(ctx, inputs, telemetryProps) {
        return userTask_1.addResource(ctx, inputs, telemetryProps);
    }
};
tslib_1.__decorate([
    hooks_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInSolutionNames.azure } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TeamsFxAzureSolution.prototype, "addFeature", null);
tslib_1.__decorate([
    hooks_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInSolutionNames.azure } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TeamsFxAzureSolution.prototype, "provisionResources", null);
tslib_1.__decorate([
    hooks_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInSolutionNames.azure } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TeamsFxAzureSolution.prototype, "deploy", null);
tslib_1.__decorate([
    hooks_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInSolutionNames.azure } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TeamsFxAzureSolution.prototype, "publishApplication", null);
tslib_1.__decorate([
    hooks_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInSolutionNames.azure } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TeamsFxAzureSolution.prototype, "executeUserTask", null);
tslib_1.__decorate([
    hooks_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInSolutionNames.azure } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TeamsFxAzureSolution.prototype, "addCapability", null);
tslib_1.__decorate([
    hooks_1.hooks([CommonErrorHandlerMW_1.CommonErrorHandlerMW({ telemetry: { component: constants_1.BuiltInSolutionNames.azure } })]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TeamsFxAzureSolution.prototype, "addResource", null);
TeamsFxAzureSolution = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInSolutionNames.azure)
], TeamsFxAzureSolution);
exports.TeamsFxAzureSolution = TeamsFxAzureSolution;
//# sourceMappingURL=solution.js.map