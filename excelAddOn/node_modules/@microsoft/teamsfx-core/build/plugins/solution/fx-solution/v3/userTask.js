"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.addResource = exports.addCapability = exports.getQuestionsForAddResource = exports.getQuestionsForUserTask = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const util = tslib_1.__importStar(require("util"));
const localizeUtils_1 = require("../../../../common/localizeUtils");
const core_1 = require("../../../../core");
const constants_1 = require("../constants");
const question_1 = require("../question");
const solutionSettingsHelper_1 = require("../utils/solutionSettingsHelper");
const executeUserTask_1 = require("../v2/executeUserTask");
const getQuestions_1 = require("../v2/getQuestions");
const addFeature_1 = require("./addFeature");
const constants_2 = require("./constants");
async function getQuestionsForUserTask(ctx, inputs, func, envInfo, tokenProvider) {
    if (func.method === "addCapability") {
        return await getQuestions_1.getQuestionsForAddCapability(ctx, inputs, func, envInfo, tokenProvider);
    }
    if (func.method === "addResource") {
        return await getQuestionsForAddResource(ctx, inputs);
    }
    return teamsfx_api_1.ok(undefined);
}
exports.getQuestionsForUserTask = getQuestionsForUserTask;
async function getQuestionsForAddResource(ctx, inputs) {
    const settings = ctx.projectSetting.solutionSettings;
    const isDynamicQuestion = teamsfx_api_1.DynamicPlatforms.includes(inputs.platform);
    let addQuestion;
    if (!isDynamicQuestion) {
        addQuestion = question_1.createAddAzureResourceQuestion(false, false, false, false);
    }
    else {
        if (!settings) {
            return teamsfx_api_1.err(new core_1.OperationNotPermittedError("addResource"));
        }
        const alreadyHaveFunction = settings.activeResourcePlugins.includes(constants_2.BuiltInFeaturePluginNames.function);
        const alreadyHaveSQL = settings.activeResourcePlugins.includes(constants_2.BuiltInFeaturePluginNames.sql);
        const alreadyHaveAPIM = settings.activeResourcePlugins.includes(constants_2.BuiltInFeaturePluginNames.apim);
        const alreadyHaveKeyVault = settings.activeResourcePlugins.includes(constants_2.BuiltInFeaturePluginNames.keyVault);
        addQuestion = question_1.createAddAzureResourceQuestion(alreadyHaveFunction, alreadyHaveSQL, alreadyHaveAPIM, alreadyHaveKeyVault);
        const canProceed = executeUserTask_1.canAddResource(ctx.projectSetting, ctx.telemetryReporter);
        if (canProceed.isErr()) {
            return teamsfx_api_1.err(canProceed.error);
        }
    }
    const addAzureResourceNode = new teamsfx_api_1.QTreeNode(addQuestion);
    //traverse plugins' getQuestionsForAddFeature
    const pluginsWithResources = [
        [constants_2.BuiltInFeaturePluginNames.function, question_1.AzureResourceFunction.id],
        [constants_2.BuiltInFeaturePluginNames.sql, question_1.AzureResourceSQL.id],
        [constants_2.BuiltInFeaturePluginNames.apim, question_1.AzureResourceApim.id],
        [constants_2.BuiltInFeaturePluginNames.keyVault, question_1.AzureResourceKeyVault.id],
    ];
    for (const pair of pluginsWithResources) {
        const pluginName = pair[0];
        const resourceName = pair[1];
        const plugin = typedi_1.Container.get(pluginName);
        if (plugin.getQuestionsForAddInstance) {
            const res = await plugin.getQuestionsForAddInstance(ctx, inputs);
            if (res.isErr())
                return res;
            if (res.value) {
                const node = res.value;
                node.condition = { contains: resourceName };
                if (node.data)
                    addAzureResourceNode.addChild(node);
            }
        }
    }
    return teamsfx_api_1.ok(addAzureResourceNode);
}
exports.getQuestionsForAddResource = getQuestionsForAddResource;
async function addCapability(ctx, inputs, telemetryProps) {
    if (!inputs.projectPath) {
        return teamsfx_api_1.err(new teamsfx_api_1.InvalidInputError("solution", "inputs.projectPath is undefined"));
    }
    solutionSettingsHelper_1.ensureSolutionSettings(ctx.projectSetting);
    const capabilitiesAnswer = inputs[question_1.AzureSolutionQuestionNames.Capabilities];
    if (telemetryProps) {
        telemetryProps[constants_1.SolutionTelemetryProperty.Capabilities] = capabilitiesAnswer.join(";");
    }
    const solutionSettings = ctx.projectSetting.solutionSettings;
    const features = [];
    if (!solutionSettings.activeResourcePlugins.includes(constants_2.BuiltInFeaturePluginNames.aad)) {
        features.push(constants_2.BuiltInFeaturePluginNames.aad);
    }
    if (capabilitiesAnswer.includes(question_1.TabOptionItem.id)) {
        features.push(constants_2.BuiltInFeaturePluginNames.frontend);
    }
    if (capabilitiesAnswer.includes(question_1.BotOptionItem.id) ||
        capabilitiesAnswer.includes(question_1.MessageExtensionItem.id)) {
        features.push(constants_2.BuiltInFeaturePluginNames.bot);
    }
    if (features.length > 0) {
        const addFeatureInputs = Object.assign(Object.assign({}, inputs), { projectPath: inputs.projectPath, features: features });
        const addFeatureRes = await addFeature_1.addFeature(ctx, addFeatureInputs);
        if (addFeatureRes.isErr()) {
            return teamsfx_api_1.err(addFeatureRes.error);
        }
        if (capabilitiesAnswer.length > 0) {
            const addNames = capabilitiesAnswer.map((c) => `'${c}'`).join(" and ");
            const single = capabilitiesAnswer.length === 1;
            const template = inputs.platform === teamsfx_api_1.Platform.CLI
                ? single
                    ? localizeUtils_1.getLocalizedString("core.addCapability.addCapabilityNoticeForCli")
                    : localizeUtils_1.getLocalizedString("core.addCapability.addCapabilitiesNoticeForCli")
                : single
                    ? localizeUtils_1.getLocalizedString("core.addCapability.addCapabilityNotice")
                    : localizeUtils_1.getLocalizedString("core.addCapability.addCapabilitiesNotice");
            const msg = util.format(template, addNames);
            ctx.userInteraction.showMessage("info", msg, false);
        }
    }
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.addCapability = addCapability;
async function addResource(ctx, inputs, telemetryProps) {
    if (!inputs.projectPath) {
        return teamsfx_api_1.err(new teamsfx_api_1.InvalidInputError("solution", "inputs.projectPath is undefined"));
    }
    solutionSettingsHelper_1.ensureSolutionSettings(ctx.projectSetting);
    const addResourcesAnswer = inputs[question_1.AzureSolutionQuestionNames.AddResources];
    if (telemetryProps) {
        telemetryProps[constants_1.SolutionTelemetryProperty.Resources] = addResourcesAnswer.join(";");
    }
    const addFeatureInputs = Object.assign(Object.assign({}, inputs), { projectPath: inputs.projectPath, features: [] });
    for (const resource of addResourcesAnswer) {
        if (resource === question_1.AzureResourceSQL.id) {
            addFeatureInputs.features.push(constants_2.BuiltInFeaturePluginNames.sql);
        }
        else if (resource === question_1.AzureResourceApim.id) {
            addFeatureInputs.features.push(constants_2.BuiltInFeaturePluginNames.apim);
        }
        else if (resource === question_1.AzureResourceFunction.id) {
            addFeatureInputs.features.push(constants_2.BuiltInFeaturePluginNames.function);
        }
        else if (resource === question_1.AzureResourceKeyVault.id) {
            addFeatureInputs.features.push(constants_2.BuiltInFeaturePluginNames.keyVault);
        }
    }
    if (addFeatureInputs.features.length > 0) {
        const addFeatureRes = await addFeature_1.addFeature(ctx, addFeatureInputs);
        if (addFeatureRes.isErr())
            return teamsfx_api_1.err(addFeatureRes.error);
        if (addResourcesAnswer.length > 0) {
            const addNames = addResourcesAnswer.join(" and ");
            const single = addResourcesAnswer.length === 1;
            const template = inputs.platform === teamsfx_api_1.Platform.CLI
                ? single
                    ? localizeUtils_1.getLocalizedString("core.addResource.addResourceNoticeForCli")
                    : localizeUtils_1.getLocalizedString("core.addResource.addResourcesNoticeForCli")
                : single
                    ? localizeUtils_1.getLocalizedString("core.addResource.addResourceNotice")
                    : localizeUtils_1.getLocalizedString("core.addResource.addResourcesNotice");
            ctx.userInteraction.showMessage("info", util.format(template, addNames), false);
        }
    }
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.addResource = addResource;
//# sourceMappingURL=userTask.js.map