import { Func, FxError, Inputs, Json, M365TokenProvider, Result, TokenProvider, v2, v3, Void } from "@microsoft/teamsfx-api";
import { getQuestionsForAddFeature } from "./addFeature";
import { getQuestionsForDeploy } from "./deploy";
import { getQuestionsForProvision } from "./provision";
import { getQuestionsForPublish } from "./publish";
import { getQuestionsForUserTask } from "./userTask";
export declare class TeamsFxAzureSolution implements v3.ISolution {
    name: string;
    getQuestionsForAddFeature: typeof getQuestionsForAddFeature;
    addFeature(ctx: v2.Context, inputs: v3.SolutionAddFeatureInputs, telemetryProps?: Json): Promise<Result<Void, FxError>>;
    getQuestionsForProvision: typeof getQuestionsForProvision;
    provisionResources(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider, telemetryProps?: Json): Promise<Result<v3.EnvInfoV3, FxError>>;
    getQuestionsForDeploy: typeof getQuestionsForDeploy;
    deploy(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: TokenProvider, telemetryProps?: Json): Promise<Result<Void, FxError>>;
    getQuestionsForPublish: typeof getQuestionsForPublish;
    publishApplication(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: M365TokenProvider, telemetryProps?: Json): Promise<Result<Void, FxError>>;
    getQuestionsForUserTask: typeof getQuestionsForUserTask;
    executeUserTask(ctx: v2.Context, inputs: Inputs, func: Func, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider, telemetryProps?: Json): Promise<Result<unknown, FxError>>;
    addCapability(ctx: v2.Context, inputs: Inputs, telemetryProps?: Json): Promise<Result<Void, FxError>>;
    addResource(ctx: v2.Context, inputs: Inputs, telemetryProps?: Json): Promise<Result<Void, FxError>>;
}
//# sourceMappingURL=solution.d.ts.map