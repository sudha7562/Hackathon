/**
 *
 * PVM(Plugin Version Manager)
 *
 * ....................     ....................
 * .. Project Config ..     .. Dynamic Plugin ..
 * ....................     ....................
 *          |                        |
 *          v                        v
 *     ............             ...........
 *     .. Broker ..             .. Depot ..
 *     ............             ...........
 *          ^                        ^
 *          |                        |
 *          v                        v
 * .............................................           ...................
 * ..       PVM(Plugin Version Manager)       .. <-------> .. Static Plugin ..
 * .............................................           ...................
 *                    ^
 *                    |
 *                    v
 *                ..........
 *                .. Core ..
 *                ..........
 *
 * We're gonna setup a community for developers to contribute plugin together, which
 * means Core should have capability to manage and load plugin dynamically.
 *
 * This component will act as:
 * 1. A depot which holds all plugins with varieties of versions.
 * 2. A broker which provides C.R.U.D operation of plugin for core.
 * 3. A coordinator which combines build-in plugins and dynamic plugins.
 *
 * PVM will store all plugins with the pattern '${home}/.fx/${plugin}/${version}/'
 *
 */
import { FxError, Result } from "@microsoft/teamsfx-api";
import { PluginName } from "./type";
export default class PVM {
    /**
     * core should use this api to load plugins of a specific project dynamically
     *
     * @param root - target project root path.
     * @returns error on requiring plugins.
     */
    static load(root: string): Promise<Result<PluginName[], FxError>>;
}
export declare const BuiltInFeaturePluginNames: string[];
//# sourceMappingURL=pvm.d.ts.map