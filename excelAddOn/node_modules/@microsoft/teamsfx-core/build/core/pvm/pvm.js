"use strict";
/**
 *
 * PVM(Plugin Version Manager)
 *
 * ....................     ....................
 * .. Project Config ..     .. Dynamic Plugin ..
 * ....................     ....................
 *          |                        |
 *          v                        v
 *     ............             ...........
 *     .. Broker ..             .. Depot ..
 *     ............             ...........
 *          ^                        ^
 *          |                        |
 *          v                        v
 * .............................................           ...................
 * ..       PVM(Plugin Version Manager)       .. <-------> .. Static Plugin ..
 * .............................................           ...................
 *                    ^
 *                    |
 *                    v
 *                ..........
 *                .. Core ..
 *                ..........
 *
 * We're gonna setup a community for developers to contribute plugin together, which
 * means Core should have capability to manage and load plugin dynamically.
 *
 * This component will act as:
 * 1. A depot which holds all plugins with varieties of versions.
 * 2. A broker which provides C.R.U.D operation of plugin for core.
 * 3. A coordinator which combines build-in plugins and dynamic plugins.
 *
 * PVM will store all plugins with the pattern '${home}/.fx/${plugin}/${version}/'
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuiltInFeaturePluginNames = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const error_1 = require("../error");
const depot_1 = require("./depot");
const broker_1 = require("./broker");
class PVM {
    /**
     * core should use this api to load plugins of a specific project dynamically
     *
     * @param root - target project root path.
     * @returns error on requiring plugins.
     */
    static async load(root) {
        const config = await broker_1.Broker.list(root);
        const result = await depot_1.Depot.install(config);
        if (result.isOk()) {
            const plugins = result.value;
            try {
                for (const name in plugins) {
                    await require(name);
                }
            }
            catch (e) {
                return teamsfx_api_1.err(error_1.LoadPluginError());
            }
            const dynamicPlugins = Object.keys(plugins);
            const allPlugins = [...dynamicPlugins, ...exports.BuiltInFeaturePluginNames];
            return teamsfx_api_1.ok(allPlugins);
        }
        else {
            return teamsfx_api_1.err(result.error);
        }
    }
}
exports.default = PVM;
exports.BuiltInFeaturePluginNames = [
    "fx-resource-appstudio",
    "fx-resource-aad",
    "fx-resource-bot",
    "fx-resource-azure-web-app",
    "fx-resource-frontend-hosting",
    "fx-resource-spfx",
];
//# sourceMappingURL=pvm.js.map