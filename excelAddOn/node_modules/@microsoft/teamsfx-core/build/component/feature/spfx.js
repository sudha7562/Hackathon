"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSPFxScaffoldQuestion = exports.SPFxTab = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const globalVars_1 = require("../../core/globalVars");
const question_1 = require("../../core/question");
const questions_1 = require("../../plugins/resource/spfx/utils/questions");
const constants_1 = require("../constants");
const debug_1 = require("../debug");
const utils_1 = require("../utils");
let SPFxTab = class SPFxTab {
    constructor() {
        this.name = constants_1.ComponentNames.SPFxTab;
    }
    // @hooks([
    //   ActionExecutionMW({
    //     question: (context: ContextV3, inputs: InputsWithProjectPath) => {
    //       return ok(getSPFxScaffoldQuestion());
    //     },
    //   }),
    // ])
    async add(context, inputs) {
        const projectSettings = context.projectSetting;
        // add teams-tab
        projectSettings.components.push({
            name: "teams-tab",
            hosting: constants_1.ComponentNames.SPFx,
            deploy: true,
            folder: inputs.folder || "SPFx",
            build: true,
        });
        // add hosting component
        projectSettings.components.push({
            name: constants_1.ComponentNames.SPFx,
            provision: true,
        });
        projectSettings.programmingLanguage =
            projectSettings.programmingLanguage || inputs[question_1.CoreQuestionNames.ProgrammingLanguage];
        globalVars_1.globalVars.isVS = inputs[question_1.CoreQuestionNames.ProgrammingLanguage] === "csharp";
        const effects = ["config 'teams-tab' in projectSettings"];
        {
            const spfxCode = typedi_1.Container.get(constants_1.ComponentNames.SPFxTabCode);
            const res = await spfxCode.generate(context, inputs);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
            effects.push("scaffold spfx code");
        }
        {
            const res = await debug_1.generateLocalDebugSettings(context, inputs);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
            effects.push("generate local debug settings");
        }
        utils_1.addFeatureNotify(inputs, context.userInteraction, "Capability", [inputs.features]);
        return teamsfx_api_1.ok(undefined);
    }
};
SPFxTab = tslib_1.__decorate([
    typedi_1.Service(constants_1.ComponentNames.SPFxTab)
], SPFxTab);
exports.SPFxTab = SPFxTab;
function getSPFxScaffoldQuestion() {
    const spfx_frontend_host = new teamsfx_api_1.QTreeNode({
        type: "group",
    });
    const spfx_version_check = new teamsfx_api_1.QTreeNode(questions_1.versionCheckQuestion);
    spfx_frontend_host.addChild(spfx_version_check);
    const spfx_framework_type = new teamsfx_api_1.QTreeNode(questions_1.frameworkQuestion);
    spfx_version_check.addChild(spfx_framework_type);
    const spfx_webpart_name = new teamsfx_api_1.QTreeNode(questions_1.webpartNameQuestion);
    spfx_version_check.addChild(spfx_webpart_name);
    return spfx_frontend_host;
}
exports.getSPFxScaffoldQuestion = getSPFxScaffoldQuestion;
//# sourceMappingURL=spfx.js.map