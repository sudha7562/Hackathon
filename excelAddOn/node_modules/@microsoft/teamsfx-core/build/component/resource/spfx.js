"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpfxResource = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const plugin_1 = require("../../plugins/resource/spfx/v3/plugin");
const constants_1 = require("../constants");
const actionExecutionMW_1 = require("../middleware/actionExecutionMW");
let SpfxResource = class SpfxResource {
    constructor() {
        this.name = constants_1.ComponentNames.SPFx;
        this.outputs = {};
        this.finalOutputKeys = [];
        this.spfxPluginImpl = new plugin_1.SPFxPluginImpl();
    }
    async deploy(context, inputs) {
        const buildRes = await this.spfxPluginImpl.buildSPPackage(context, inputs);
        if (buildRes.isErr()) {
            return teamsfx_api_1.err(buildRes.error);
        }
        const deployRes = await this.spfxPluginImpl.deploy(context, inputs, context.tokenProvider);
        if (deployRes.isErr()) {
            return teamsfx_api_1.err(deployRes.error);
        }
        return teamsfx_api_1.ok(undefined);
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            enableTelemetry: true,
            telemetryComponentName: "fx-resource-spfx",
            telemetryEventName: "deploy",
            errorSource: "SPFx",
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], SpfxResource.prototype, "deploy", null);
SpfxResource = tslib_1.__decorate([
    typedi_1.Service(constants_1.ComponentNames.SPFx)
], SpfxResource);
exports.SpfxResource = SpfxResource;
//# sourceMappingURL=spfx.js.map