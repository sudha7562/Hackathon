"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIMResource = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const constants_1 = require("../../plugins/solution/fx-solution/v3/constants");
const constants_2 = require("../constants");
const actionExecutionMW_1 = require("../middleware/actionExecutionMW");
const azureResource_1 = require("./azureResource");
let APIMResource = class APIMResource extends azureResource_1.AzureResource {
    constructor() {
        super(...arguments);
        this.name = constants_2.ComponentNames.APIM;
        this.bicepModuleName = constants_2.ComponentNames.APIM;
        this.outputs = constants_2.APIMOutputs;
        this.finalOutputKeys = [
            "apimClientAADObjectId",
            "apimClientAADClientId",
            "apimClientAADClientSecret",
            "serviceResourceId",
            "productResourceId",
            "authServerResourceId",
        ];
        this.secretKeys = ["apimClientAADClientSecret"];
    }
    async provision(context, inputs) {
        if (context.envInfo.envName !== "local") {
            const ctx = context;
            const apimV3 = typedi_1.Container.get(constants_1.BuiltInFeaturePluginNames.apim);
            const res = await apimV3.provisionResource(ctx, inputs, ctx.envInfo, ctx.tokenProvider);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
        }
        return teamsfx_api_1.ok(undefined);
    }
    async configure(context, inputs) {
        if (context.envInfo.envName !== "local") {
            const ctx = context;
            const apimV3 = typedi_1.Container.get(constants_1.BuiltInFeaturePluginNames.apim);
            const res = await apimV3.configureResource(ctx, inputs, ctx.envInfo, ctx.tokenProvider);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
        }
        return teamsfx_api_1.ok(undefined);
    }
    async deploy(context, inputs) {
        const ctx = context;
        const apimV3 = typedi_1.Container.get(constants_1.BuiltInFeaturePluginNames.apim);
        const res = await apimV3.deploy(ctx, inputs, ctx.envInfo, ctx.tokenProvider);
        if (res.isErr())
            return teamsfx_api_1.err(res.error);
        return teamsfx_api_1.ok(undefined);
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            question: (context, inputs) => {
                const apimV3 = typedi_1.Container.get(constants_1.BuiltInFeaturePluginNames.apim);
                return apimV3.getQuestionsForDeploy(context, inputs, context.envInfo, context.tokenProvider);
            },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], APIMResource.prototype, "deploy", null);
APIMResource = tslib_1.__decorate([
    typedi_1.Service(constants_2.ComponentNames.APIM)
], APIMResource);
exports.APIMResource = APIMResource;
//# sourceMappingURL=apim.js.map