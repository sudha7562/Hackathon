import { ActionContext, CloudResource, ContextV3, FxError, Inputs, InputsWithProjectPath, ResourceContextV3, QTreeNode, Result, v3 } from "@microsoft/teamsfx-api";
import "reflect-metadata";
export declare class AppManifest implements CloudResource {
    name: string;
    outputs: {
        teamsAppId: {
            key: string;
        };
        tenantId: {
            key: string;
        };
    };
    finalOutputKeys: string[];
    init(context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    addCapability(inputs: InputsWithProjectPath, capabilities: v3.ManifestCapability[]): Promise<Result<undefined, FxError>>;
    provision(context: ResourceContextV3, inputs: InputsWithProjectPath, actionContext?: ActionContext): Promise<Result<undefined, FxError>>;
    configure(context: ResourceContextV3, inputs: InputsWithProjectPath, actionContext?: ActionContext): Promise<Result<undefined, FxError>>;
    publish(context: ResourceContextV3, inputs: InputsWithProjectPath, actionCtx?: ActionContext): Promise<Result<undefined, FxError>>;
    validate(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<string[], FxError>>;
    build(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<string, FxError>>;
    deploy(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
}
export declare function publishQuestion(inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function addCapabilities(inputs: InputsWithProjectPath, capabilities: v3.ManifestCapability[]): Promise<Result<undefined, FxError>>;
//# sourceMappingURL=appManifest.d.ts.map