"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTeamsAppManifestPath = exports.writeAppManifest = exports.readAppManifest = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const utils_1 = require("../../../common/utils");
const globalVars_1 = require("../../../core/globalVars");
const migrate_1 = require("../../migrate");
const errors_1 = require("../../../plugins/resource/appstudio/errors");
const results_1 = require("../../../plugins/resource/appstudio/results");
async function readAppManifest(projectPath) {
    const filePath = await getTeamsAppManifestPath(projectPath);
    if (!(await fs_extra_1.default.pathExists(filePath))) {
        return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.FileNotFoundError.name, errors_1.AppStudioError.FileNotFoundError.message(filePath)));
    }
    const content = await fs_extra_1.default.readFile(filePath, { encoding: "utf-8" });
    const contentV3 = globalVars_1.isV3() ? migrate_1.convertManifestTemplateToV3(content) : content;
    const manifest = JSON.parse(contentV3);
    return teamsfx_api_1.ok(manifest);
}
exports.readAppManifest = readAppManifest;
async function writeAppManifest(appManifest, projectPath) {
    const filePath = await getTeamsAppManifestPath(projectPath);
    const content = JSON.stringify(appManifest, undefined, 4);
    const contentV2 = globalVars_1.isV3() ? migrate_1.convertManifestTemplateToV2(content) : content;
    await fs_extra_1.default.writeFile(filePath, contentV2);
    return teamsfx_api_1.ok(undefined);
}
exports.writeAppManifest = writeAppManifest;
async function getTeamsAppManifestPath(projectPath) {
    const templateFolder = await utils_1.getProjectTemplatesFolderPath(projectPath);
    const filePath = path.join(templateFolder, "appPackage", "manifest.template.json");
    return filePath;
}
exports.getTeamsAppManifestPath = getTeamsAppManifestPath;
//# sourceMappingURL=utils.js.map